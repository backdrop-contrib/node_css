<?php

/**
 * Implements hook_menu().
 */
function node_css_menu() {
  $items = [];

  // Define the settings page.
  $items['admin/config/content/node_css'] = [
    'title' => 'Node CSS Settings',
    'description' => 'Settings for custom CSS on nodes.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['node_css_settings_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Define the Node CSS settings form with content type selection.
 */
function node_css_settings_form($form, &$form_state) {
  // Load existing configuration.
  $config = config('node_css.settings');

  // Retrieve all content types.
  $content_types = node_type_get_types();
  $options = [];

  // Prepare options array with machine names and labels.
  foreach ($content_types as $type => $info) {
    $options[$type] = $info->name;
  }

  // Checkbox list for selecting content types.
  $form['enabled_content_types'] = [
    '#type' => 'checkboxes',
    '#title' => t('Enable Node CSS for Content Types'),
    '#description' => t('Select the content types for which the Node CSS module should be active.'),
    '#options' => $options,
    '#default_value' => $config->get('enabled_content_types') ?: [],
  ];

  // Submit button.
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save settings'),
  ];

  return $form;
}

/**
 * Submit handler for the Node CSS settings form.
 */
function node_css_settings_form_submit($form, &$form_state) {
  // Save selected content types in configuration.
  $config = config('node_css.settings');
  $config->set('enabled_content_types', array_filter($form_state['values']['enabled_content_types']))->save();

  // Display a status message.
  backdrop_set_message(t('The Node CSS settings have been saved.'));
}


/**
 * Implements hook_form_FORM_ID_alter() to add a CSS field to node forms.
 */
function node_css_form_node_form_alter(&$form, &$form_state) {

  // Load existing configuration.
  $config = config('node_css.settings');
  $enabled_content_types = $config->get('enabled_content_types');

  // Return early if no content type or current content type is not selected.
  if (!in_array($form['#node']->type, $enabled_content_types)) {
    return;
  }

  // If at right content type page, get the default value.
  $default_value = $config->get('node-' . $form['#node']->nid) ?? $config->get('default');

  $form['#attached']['js'] = array(
    'https://cdnjs.cloudflare.com/ajax/libs/ace/1.34.1/ace.js' => array(
      'preprocess' => FALSE,
    ),
    'https://cdnjs.cloudflare.com/ajax/libs/ace/1.34.1/theme-chrome.js' => array(
      'preprocess' => FALSE,
    ),
    'https://cdnjs.cloudflare.com/ajax/libs/ace/1.34.1/mode-css.js' => array(
      'preprocess' => FALSE,
    ),
    backdrop_get_path('module', 'node_css') . '/syntax_highlighter.js' => array(
      'preprocess' => FALSE,
    ),
  );

  $form['#attached']['css'] = array(
    backdrop_get_path('module', 'node_css') . '/syntax_highlighter.css',
  );

  $form['css_text'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#description' => t('Add custom CSS for this node.'),
    '#default_value' => $default_value,
    '#weight' => -100,
  );

  $form['css_text_ace'] = array(
    '#prefix' => '<span class="disable-ace">Disable syntax highlighter</span>',
    '#markup' => '<div class="ace-editor"><div id="editor">' . $default_value . '</div></div>',
    '#weight' => -99,
  );

  // Attach custom CSS to the node object when the form is submitted.
  $form['#submit'][] = 'node_css_form_node_form_submit';
}

/**
 * Custom submit handler to save custom CSS with the node.
 */
function node_css_form_node_form_submit($form, &$form_state) {
  config_set('node_css.settings', 'node-' . $form_state['node']->nid, $form_state['values']['css_text']);
}

/**
 * Implements hook_node_view() to add custom CSS to the node.
 */
function node_css_node_view($node, $view_mode) {
  $config = config('node_css.settings');
  if ($node_css = $config->get('node-' . $node->nid)) {
    $custom_css = '<style media="all">' . $node_css . '</style>' . PHP_EOL;
    backdrop_add_html_head([
      '#type' => 'markup',
      '#markup' => $custom_css,
      '#weight' => 100,
    ], 'node_css_' . $node->nid);
  }
}
