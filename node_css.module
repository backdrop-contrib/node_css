<?php

/**
 * Implements hook_menu().
 */
function node_css_menu() {
  $items = [];

  // Define the settings page.
  $items['admin/config/content/node_css'] = array(
    'title' => 'Node CSS Settings',
    'description' => 'Settings for custom CSS on nodes.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_css_settings'),
    'file' => 'node_css.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() to add a CSS field to node forms
 * with CodeMirror CSS editor support using a CDN.
 */
function node_css_form_node_form_alter(&$form, &$form_state) {
  // Load existing configuration.
  $config = config('node_css.settings');
  $enabled_content_types = $config->get('enabled_content_types');
  $content_type = $form['#node']->type;

  // If specific content types are selected, apply Node CSS only to those types.
  // Return early if the current content type is not among the selected types.
  if (!empty($enabled_content_types) && !in_array($content_type, $enabled_content_types)) {
    return;
  }

  // Determine the default CSS value, checking in order: node-specific CSS, content-type default CSS, or global default CSS.
  $default_value = $config->get('node-' . $form['#node']->nid)
    ?? $config->get('default_css_' . $content_type)
    ?? $config->get('default');

  // Get the configured height for the textarea, defaulting to 10 rows.
  $textarea_height = $config->get('css_textarea_height') ?: 10;

  // Get the configured position for the CSS editor.
  $position = $config->get('css_text_position') ?: 'top';

  // Define the vertical tab container.
  if ($position === 'vertical_tab') {

    // Add the CSS editor in a vertical tab.
    $form['css_text_fieldset'] = [
      '#type' => 'fieldset',
      '#title' => t('Node CSS'),
      '#group' => 'additional_settings',
      '#description' => t('Add custom CSS for this node. This CSS will apply only to this specific node.'),
    ];
    $form['css_text_fieldset']['css_text'] = [
      '#type' => 'textarea',
      '#title' => t('Node CSS'),
      '#rows' => $textarea_height,
      '#description' => t('Add custom CSS for this node. This CSS will apply only to this specific node.'),
      '#default_value' => $default_value,
      '#attributes' => ['class' => ['codemirror-css-editor']],  // Add custom class for targeting.
    ];
  }
  else {
    // Set weight based on position setting: higher weight positions it lower.
    $fieldset_weight = ($position === 'top') ? -100 : 0;
    // Define the textarea with custom CSS settings.
    $form['css_text'] = [
      '#type' => 'textarea',
      '#title' => t('Node CSS'),
      '#rows' => $textarea_height,
      '#description' => t('Add custom CSS for this node. This CSS will apply only to this specific node.'),
      '#default_value' => $default_value,
      '#weight' => $fieldset_weight,
      '#attributes' => ['class' => ['codemirror-css-editor']],  // Add custom class for targeting.
    ];
  }

  // Attach CodeMirror using the helper function.
  node_css_attach_codemirror($form);
}




/**
 * Implement hook_node_insert().
 *
 * @param Node $node
 * @return void
 */
function node_css_node_insert(Node $node) {
  config_set('node_css.settings', 'node-' . $node->nid, $node->css_text);
}

/**
 * Implement hook_node_update().
 *
 * @param Node $node
 * @return void
 */
function node_css_node_update(Node $node) {
  config_set('node_css.settings', 'node-' . $node->nid, $node->css_text);
}

/**
 * Implements hook_node_view() to add custom CSS to the node if enabled for its content type.
 */
function node_css_node_view($node, $view_mode) {
  $config = config('node_css.settings');
  $enabled_content_types = $config->get('enabled_content_types');

  // If specific content types are selected, apply only to those types.
  if (!empty($enabled_content_types) && !in_array($node->type, $enabled_content_types)) {
    return;
  }

  // Check for node-specific CSS.
  if ($node_css = $config->get('node-' . $node->nid)) {
    $custom_css = '<style media="all">' . $node_css . '</style>' . PHP_EOL;
    backdrop_add_html_head([
      '#type' => 'markup',
      '#markup' => $custom_css,
      '#weight' => 100,
    ], 'node_css_' . $node->nid);
  }
}


/**
 * Helper function to attach CodeMirror to a form.
 */
function node_css_attach_codemirror(&$form, $textarea_selector = '.codemirror-css-editor') {
  // Load existing configuration.
  $config = config('node_css.settings');
  $selected_theme = $config->get('codemirror_theme') ?: 'default';
  $textarea_height = $config->get('css_textarea_height') ?: 10;  // Default to 10 rows if not set.

  // Calculate the height in pixels based on an estimated row height.
  // Assuming an average row height of 20px, adjust as needed for styling.
  $height_in_pixels = $textarea_height * 20;

  // Attach the CodeMirror library and chosen theme from CDN.
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/codemirror.min.js',
  ];
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/css.min.js',
  ];
  $form['#attached']['css'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/css/codemirror.min.css',
  ];

  // CSS property value autocompletion.
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/show-hint.min.js',
  ];
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/css-hint.min.js',
  ];
  $form['#attached']['css'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/css/show-hint.min.css',
  ];

  $form['#attached']['css'][] = [
    'type' => 'inline',
    'data' => '
    .CodeMirror {
      font-size: 12px;
      line-height: 1.4;
      height: ' . $height_in_pixels . 'px;
      resize: both;
      border: 1px #bbb solid;
    }
    .CodeMirror::after {
      content: \'\';
      position: absolute;
      left: 80ch;
      top: 0;
      bottom: 0;
      border-left: 1px dashed #ccc;
      pointer-events: none;
    }
    ',
  ];

  // Add theme-specific CSS file based on the selected theme.
  if ($selected_theme !== 'default') {
    $form['#attached']['css'][] = [
      'type' => 'external',
      'data' => "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/theme/{$selected_theme}.min.css",
    ];
  }

  $base_url = url('', ['absolute' => TRUE]);
  $css_suggestions_url = $base_url . backdrop_get_path('module', 'node_css') . '/codemirror/css-suggestions.json';

  // Custom inline JavaScript to initialize CodeMirror on the textarea with locally stored CSS autocompletion.
  $form['#attached']['js'][] = [
    'type' => 'inline',
    'data' => "document.addEventListener('DOMContentLoaded', function() {
                var cssSuggestions = {};

                // Fetch CSS suggestions from the local JSON file
                fetch('{$css_suggestions_url}')
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Network response was not ok');
                    }
                    return response.json();
                  })
                  .then(data => {
                    cssSuggestions = data;
                  })
                  .catch(error => console.error('Error fetching CSS suggestions:', error));

                var editors = document.querySelectorAll('{$textarea_selector}');
                editors.forEach(function(textarea) {
                  CodeMirror.fromTextArea(textarea, {
                    mode: 'css',
                    lineNumbers: true,
                    lineWrapping: true,
                    theme: '{$selected_theme}',  // Apply user-selected theme.
                    extraKeys: {
                      'Space': function(cm) {  // Trigger autocompletion on Space key and insert a space.
                        cm.replaceSelection(' ');  // Insert a regular space before showing suggestions.
                        var hintOptions = customCssHint(cm);
                        if (hintOptions.list && hintOptions.list.length > 0) {
                          CodeMirror.showHint(cm, function(cmInstance) {
                            return hintOptions;
                          }, { completeSingle: false });
                        }
                      }
                    },
                    hintOptions: {
                      hint: customCssHint,  // Custom hint function.
                      completeSingle: false  // Do not auto-complete a single option.
                    }
                  });
                });

                // Custom hint function for context-specific CSS autocompletion using local data.
                function customCssHint(editor) {
                  var cur = editor.getCursor();
                  var token = editor.getTokenAt(cur);
                  var line = editor.getLine(cur.line);

                  // Get the CSS property by inspecting the text before the colon.
                  var property = line.slice(0, line.indexOf(':')).trim().toLowerCase();

                  // If we have suggestions for the current property, use them.
                  var list = cssSuggestions[property] || [];

                  // Adjust the from and to positions to avoid overwriting the colon or semicolon.
                  var start = token.start;
                  var end = token.end;

                  // Check if a colon exists, and if so, position the cursor to replace only the value.
                  if (line.includes(':')) {
                    start = line.indexOf(':') + 1;
                    if (line.includes(';')) {
                      end = line.indexOf(';');
                    }
                  }

                  return {
                    list: list.map(function(item) {
                      return {
                        text: ' ' + item + ';\\n  ',  // Add space before, semicolon, and newline after the suggestion.
                        displayText: item,  // Display the item without extra characters.
                      };
                    }),
                    from: CodeMirror.Pos(cur.line, start),
                    to: CodeMirror.Pos(cur.line, end)
                  };
                }
              });"
  ];
}
