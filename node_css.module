<?php

/**
 * Implements hook_menu().
 */
function node_css_menu() {
  $items = [];

  // Define the settings page.
  $items['admin/config/content/node_css'] = [
    'title' => 'Node CSS Settings',
    'description' => 'Settings for custom CSS on nodes.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['node_css_settings_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Define the Node CSS settings form with content type selection.
 */
function node_css_settings_form($form, &$form_state) {
  // Load existing configuration.
  $config = config('node_css.settings');

  // Retrieve all content types.
  $content_types = node_type_get_types();
  $options = [];

  // Prepare options array with machine names and labels.
  foreach ($content_types as $type => $info) {
    $options[$type] = $info->name;
  }

  // Checkbox list for selecting content types.
  $form['enabled_content_types'] = [
    '#type' => 'checkboxes',
    '#title' => t('Enable Node CSS for Content Types'),
    '#description' => t('Select the content types for which the Node CSS module should be active.'),
    '#options' => $options,
    '#default_value' => $config->get('enabled_content_types') ?: [],
  ];

  // Available themes for CodeMirror.
  $themes = ['default' => 'Default'];  // Start with the default theme.

// Path to the theme directory.
  $theme_dir = backdrop_get_path('module', 'node_css') . '/codemirror/theme';

// Check if the directory exists and then scan for theme files.
  if (is_dir($theme_dir)) {
    $theme_files = scandir($theme_dir);

    // Loop through each file and add it to the themes list if it's a CSS file.
    foreach ($theme_files as $file) {
      if (pathinfo($file, PATHINFO_EXTENSION) === 'css') {
        // Get the theme name without the .css extension.
        $theme_name = pathinfo($file, PATHINFO_FILENAME);
        // Convert theme name to title case for display (e.g., "material" becomes "Material").
        $display_name = ucwords(str_replace('-', ' ', $theme_name));
        // Add to the themes array.
        $themes[$theme_name] = $display_name;
      }
    }
  }

  // Select list for choosing the CodeMirror theme.
  $form['codemirror_theme'] = [
    '#type' => 'select',
    '#title' => t('Theme'),
    '#description' => t('Choose a theme for the CSS editor.'),
    '#options' => $themes,
    '#default_value' => $config->get('codemirror_theme') ?: 'default',
  ];

  // Submit button.
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save settings'),
  ];

  return $form;
}

/**
 * Submit handler for the Node CSS settings form.
 */
function node_css_settings_form_submit($form, &$form_state) {
  // Save selected content types and CodeMirror theme in configuration.
  $config = config('node_css.settings');
  $config->set('enabled_content_types', array_filter($form_state['values']['enabled_content_types']));
  $config->set('codemirror_theme', $form_state['values']['codemirror_theme']);
  $config->save();

  // Display a status message.
  backdrop_set_message(t('The Node CSS settings have been saved.'));
}


/**
 * Implements hook_form_FORM_ID_alter() to add a CSS field to node forms
 * with CodeMirror CSS editor support using a CDN.
 */
function node_css_form_node_form_alter(&$form, &$form_state) {

  // Load existing configuration.
  $config = config('node_css.settings');
  $enabled_content_types = $config->get('enabled_content_types');
  $selected_theme = $config->get('codemirror_theme') ?: 'default';  // Default theme if none is set.

  // Return early if no content type or current content type is not selected.
  if (!empty($enabled_content_types) && !in_array($form['#node']->type, $enabled_content_types)) {
    return;
  }

  // If at the right content type page, get the default value.
  $default_value = $config->get('node-' . $form['#node']->nid) ?? $config->get('default');

  // Define the textarea with custom CSS settings.
  $form['css_text'] = [
    '#type' => 'textarea',
    '#rows' => 10,
    '#description' => t('Add custom CSS for this node.'),
    '#default_value' => $default_value,
    '#weight' => -100,
    '#attributes' => ['class' => ['codemirror-css-editor']],  // Add custom class for targeting.
  ];

  // Attach the CodeMirror library and chosen theme from CDN.
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/codemirror.min.js',
  ];
  $form['#attached']['js'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/js/css.min.js',
  ];
  $form['#attached']['css'][] = [
    'type' => 'file',
    'data' => backdrop_get_path('module', 'node_css') . '/codemirror/codemirror.min.css',
  ];

  $form['#attached']['js'][] = [
    'type' => 'external',
    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/addon/hint/show-hint.min.js',
  ];
  $form['#attached']['css'][] = [
    'type' => 'external',
    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/addon/hint/show-hint.min.css',
  ];
  $form['#attached']['js'][] = [
    'type' => 'external',
    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/addon/hint/css-hint.min.js',
  ];



  $form['#attached']['css'][] = [
    'type' => 'inline',
    'data' => '
    .CodeMirror {
    font-size: 12px;
    line-height: 1.4;
    resize: both;
    border: 1px #bbb solid;
    }
    .CodeMirror::after {
    content: \'\';
    position: absolute;
    left: 80ch;
    top: 0;
    bottom: 0;
    border-left: 1px dashed #ccc;
    pointer-events: none;
    }
    ',
  ];

  // Add theme-specific CSS file based on the selected theme.
  if ($selected_theme !== 'default') {
    $form['#attached']['css'][] = [
      'type' => 'external',
      'data' => "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/theme/{$selected_theme}.min.css",
    ];
  }

  $base_url = url('', ['absolute' => TRUE]);
  $css_suggestions_url = $base_url . backdrop_get_path('module', 'node_css') . '/codemirror/css-suggestions.json';

  // Custom inline JavaScript to initialize CodeMirror on the textarea with locally stored CSS autocompletion.
  $form['#attached']['js'][] = [
    'type' => 'inline',
    'data' => "document.addEventListener('DOMContentLoaded', function() {
                var cssSuggestions = {};

                // Fetch CSS suggestions from the local JSON file
                fetch('{$css_suggestions_url}')
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Network response was not ok');
                    }
                    return response.json();
                  })
                  .then(data => {
                    cssSuggestions = data;
                  })
                  .catch(error => console.error('Error fetching CSS suggestions:', error));

                var editor = CodeMirror.fromTextArea(document.querySelector('.codemirror-css-editor'), {
                  mode: 'css',
                  lineNumbers: true,
                  lineWrapping: true,
                  theme: '{$selected_theme}',  // Apply user-selected theme.
                  extraKeys: {
                    'Space': function(cm) {  // Trigger autocompletion on Space key and insert a space.
                      cm.replaceSelection(' ');  // Insert a regular space before showing suggestions.
                      var hintOptions = customCssHint(cm);
                      if (hintOptions.list && hintOptions.list.length > 0) {
                        CodeMirror.showHint(cm, function(cmInstance) {
                          return hintOptions;
                        }, { completeSingle: false });
                      }
                    }
                  },
                  hintOptions: {
                    hint: customCssHint,  // Custom hint function.
                    completeSingle: false  // Do not auto-complete a single option.
                  }
                });

                // Custom hint function for context-specific CSS autocompletion using local data.
                function customCssHint(editor) {
                  var cur = editor.getCursor();
                  var token = editor.getTokenAt(cur);
                  var line = editor.getLine(cur.line);

                  // Get the CSS property by inspecting the text before the colon.
                  var property = line.slice(0, line.indexOf(':')).trim().toLowerCase();

                  // If we have suggestions for the current property, use them.
                  var list = cssSuggestions[property] || [];

                  // Adjust the from and to positions to avoid overwriting the colon or semicolon.
                  var start = token.start;
                  var end = token.end;

                  // Check if a colon exists, and if so, position the cursor to replace only the value.
                  if (line.includes(':')) {
                    start = line.indexOf(':') + 1;
                    if (line.includes(';')) {
                      end = line.indexOf(';');
                    }
                  }

                  return {
                    list: list.map(function(item) {
                      return {
                        text: ' ' + item + ';\\n  ',  // Add space before, semicolon, and newline after the suggestion.
                        displayText: item,  // Display the item without extra characters.
                      };
                    }),
                    from: CodeMirror.Pos(cur.line, start),
                    to: CodeMirror.Pos(cur.line, end)
                  };
                }
              });"
  ];



}


/**
 * Implement hook_node_insert().
 *
 * @param Node $node
 * @return void
 */
function node_css_node_insert(Node $node) {
  config_set('node_css.settings', 'node-' . $node->nid, $node->css_text);
}

/**
 * Implement hook_node_update().
 *
 * @param Node $node
 * @return void
 */
function node_css_node_update(Node $node) {
  config_set('node_css.settings', 'node-' . $node->nid, $node->css_text);
}

/**
 * Implements hook_node_view() to add custom CSS to the node.
 */
function node_css_node_view($node, $view_mode) {
  $config = config('node_css.settings');
  if ($node_css = $config->get('node-' . $node->nid)) {
    $custom_css = '<style media="all">' . $node_css . '</style>' . PHP_EOL;
    backdrop_add_html_head([
      '#type' => 'markup',
      '#markup' => $custom_css,
      '#weight' => 100,
    ], 'node_css_' . $node->nid);
  }
}
